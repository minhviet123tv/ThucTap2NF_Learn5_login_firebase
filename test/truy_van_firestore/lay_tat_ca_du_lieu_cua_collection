https://firebase.google.com/docs/firestore/query-data/get-data


// Tóm tắt các lệnh và sự khác nhau
1. Dùng .get():
- Dùng cho Widget: Nếu get() sau doc(id) -> .doc(id).get() -> Lấy dữ liệu dạng Future của một id (là 1 Map)
- Dùng để xử lý bằng logic -> Tạo .get().then((value){}); -> Trước get() có thể là .collection() hoặc .doc(id) -> value sẽ là dạng list hoặc 1 map
2. Dùng snapshot:
- Đặt trong stream của StreamBuilder, chỉ dùng cho .collection(), có thể có where


// Cách 1: Truy vấn cho Widget -> Dùng Stream
final Stream<QuerySnapshot> queryListUser = FirebaseFirestore.instance.collection("users").snapshots(); // list user firestore
-> Dùng StreamBuilder để lấy dữ liệu cho từng item trong snapshot

// Cách 2: get.then() | Truy vấn danh sách (collection) bằng get rồi sử dụng id hoặc data ở querySnapshot.docs | isEqualTo: Những đối tượng có kết quả "capital" là true
firestore.collection("cities").where("capital", isEqualTo: true).get().then(
  (querySnapshot) {
    for (var docSnapshot in querySnapshot.docs) {
      print('${docSnapshot.id} => ${docSnapshot.data()}'); // id: là id của nút dữ liệu đó | data: dữ liệu trong nút
    }
  },
  onError: (e) => print("Error completing: $e"),
);

//VD: Lấy collection (tất cả dữ liệu) ở bảng 'chatroom' | querySnapshot.docs: Danh sách chứa id và dữ liệu 1 bảng
   await firestoreController.firestore.collection("chatroom").get().then(
     (querySnapshot) {
       for (var docSnapshot in querySnapshot.docs) {
         print('${docSnapshot.id} => ${docSnapshot.data()['chatroom-id']}');
       }
       // print(querySnapshot['chatroom-id']);
     },
     onError: (e) => print("Error QuerySnapshot: $e"),
   );

